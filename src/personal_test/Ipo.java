package personal_test;

public class Ipo {
    /*
    리트코드가 곧 IPO를 시작한다고 가정해 봅시다.
    벤처 캐피털에 좋은 가격에 주식을 팔기 위해 LeetCode는 IPO 전에 자본을 늘리기 위해 몇 가지 프로젝트를 진행하려고 합니다.
    리소스가 제한되어 있기 때문에 IPO 전에 최대 몇 개의 프로젝트만 완료할 수 있습니다.
    리트코드가 최대 k개의 프로젝트를 완료한 후 총 자본을 최대화할 수 있는 최선의 방법을 설계하도록 도와주세요.
    i번째 프로젝트의 순수익[i]이 있고 이를 시작하는 데 필요한 최소 자본[i]이 있는 프로젝트가 n개 주어집니다.
    처음에는 W의 자본이 있습니다. 프로젝트를 완료하면 순수 이익을 얻고 그 이익은 총 자본에 추가됩니다.
    주어진 프로젝트에서 최종 자본을 최대화할 수 있는 최대 k개의 프로젝트 목록을 고르고, 최종 최대화된 자본을 반환합니다.
    답은 32비트 부호 있는 정수에 맞도록 보장됩니다.
     */
    public int findMaximizedCapital(int k, int w, int[] profits, int[] capital) {
        //Greedy Algorithm



        return 0;
    }
}
